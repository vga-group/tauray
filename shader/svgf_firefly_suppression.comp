#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : enable

#include "svgf.glsl"
#include "color.glsl"

layout(binding = 0, set = 0, rgba32f) uniform readonly image2DArray accumulated_diffuse;
layout(binding = 1, set = 0, rgba32f) uniform image2DArray filtered_diffuse;
layout(binding = 2, set = 0, rgba32f) uniform image2DArray accumulated_specular;
layout(binding = 3, set = 0, rgba32f) uniform image2DArray filtered_specular;
layout(binding = 4, set = 0, rgba32f) uniform image2DArray diffuse_hist;
layout(binding = 5, set = 0, rgba32f) uniform image2DArray specular_hist;
layout(binding = 6, set = 0, rgba32f) uniform image2DArray history_length;

layout (local_size_x = 16, local_size_y = 16) in;
void main()
{
    const ivec3 p = ivec3(gl_GlobalInvocationID.xyz);
    if (!is_in_screen(p.xy)) return;

    // Firefly reduction
    // RCRS filter based on NVIDIA ReLAX presentation
    vec4 out_diffuse = imageLoad(accumulated_diffuse, p);
    vec4 out_specular = imageLoad(accumulated_specular, p);

#if FIREFLY_SUPPRESSION_ENABLED == 1
    const int radius = 1;
    float max_luminance_diff = -1.0;
    float max_luminance_spec = -1.0;
    [[unroll]] for (int y = -radius; y <= radius; ++y)
    {
        [[unroll]] for (int x = -radius; x <= radius; ++x)
        {
            if (x == 0 && y == 0) // Ignore center
                continue;

            ivec3 q = p + ivec3(x, y, 0);
            if (!is_in_screen(q.xy)) continue;

            vec4 diff = imageLoad(accumulated_diffuse, q);
            vec4 spec = imageLoad(accumulated_specular, q);

            float l_diff = rgb_to_luminance(diff.rgb);
            max_luminance_diff = max(l_diff, max_luminance_diff);

            float l_spec = rgb_to_luminance(spec.rgb);
            max_luminance_spec = max(l_spec, max_luminance_spec);
        }
    }

    float l_diff = rgb_to_luminance(out_diffuse.rgb);
    if (l_diff > max_luminance_diff)
    {
        float mul = max_luminance_diff / l_diff;
        out_diffuse.rgb *= mul;
        out_diffuse.a *= mul * mul;
    }

    float l_spec = rgb_to_luminance(out_specular.rgb);
    if (l_spec > max_luminance_spec)
    {
        float mul = max_luminance_spec / l_spec;
        out_specular.rgb *= mul;
        out_specular.a *= mul * mul;
    }

#endif
    if(any(isnan(out_diffuse))) out_diffuse = vec4(0);
    if(any(isnan(out_specular))) out_specular = vec4(0);

    imageStore(diffuse_hist, p, out_diffuse);
    imageStore(specular_hist, p, out_specular);

    vec4 history = imageLoad(history_length, p);
    //out_diffuse.a *= history.g;
    //out_specular.a *= history.a;

    if(any(isnan(out_diffuse))) out_diffuse = vec4(0);
    if(any(isnan(out_specular))) out_specular = vec4(0);

    imageStore(filtered_diffuse, p, out_diffuse);
    imageStore(filtered_specular, p, out_specular);
}
