#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : enable

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) uniform sampler2DArray src_tex;
layout(binding = 1) uniform sampler2DArray history_tex;
layout(binding = 2, rgba32f) writeonly uniform image2DArray dst_img;
layout(binding = 3, rgba32f) writeonly uniform image2DArray history_out_img;
layout(binding = 4) uniform sampler2DArray motion_tex;
#ifdef EDGE_DILATION
layout(binding = 5) uniform sampler2DArray depth_tex;
#endif

#include "math.glsl"
#include "color.glsl"
#include "scene.glsl"

layout(push_constant) uniform push_constant_buffer
{
    ivec2 size;
    int base_camera_index;
    int output_layer;
    float rounding;
    float gamma;
    float alpha;
} pc;

// Just to prevent numerical issues in corner cases.
const float kdop_dilation = 0.00001f;

const int axis_count = 7;
const vec3 axes[] = vec3[](
    // 14-DOP
    vec3(1,0,0),
    vec3(0,1,0),
    vec3(0,0,1),
    vec3(0.577350, 0.577350, 0.577350),
    vec3(-0.577350, 0.577350, 0.577350),
    vec3(0.577350, -0.577350, 0.577350),
    vec3(-0.577350, -0.577350, 0.577350)
    // 22-DOP
    /*
    vec3(1.000000, 0.000000, 0.000000),
    vec3(-0.098489, 0.184576, -0.977871),
    vec3(0.752374, -0.312087, 0.580116),
    vec3(-0.098489, -0.969577, -0.224098),
    vec3(0.330653, 0.717910, -0.612596),
    vec3(0.752374, 0.656636, -0.052553),
    vec3(0.591354, 0.440953, 0.675174),
    vec3(0.698983, -0.670755, -0.248014),
    vec3(0.176950, -0.538181, -0.824045),
    vec3(-0.698983, -0.042551, 0.713871),
    vec3(0.330652, -0.849517, 0.411084)
    */

    //18-DOP
    /*
    vec3(1.000000, 0.000000, 0.000000),
    vec3(0.645065, -0.740873, 0.187075),
    vec3(-0.035771, -0.876620, -0.479852),
    vec3(-0.035771, 0.805214, -0.591904),
    vec3(-0.645065, -0.759143, -0.087137),
    vec3(0.644718, -0.462937, -0.608299),
    vec3(-0.011445, 0.066473, 0.997723),
    vec3(0.674651, 0.049069, 0.736504),
    vec3(0.644718, 0.378148, -0.664336)
    */
);

vec4 map_color(vec3 color)
{
    vec4 result = vec4(color, 1);
    result.rgb = pow(result.rgb, vec3(pc.gamma));
#ifdef ANTI_SHIMMER
    result.r = result.r > 1e-5f ? log(result.r) : -10;
    result.g = result.g > 1e-5f ? log(result.g) : -10;
    result.b = result.b > 1e-5f ? log(result.b) : -10;
#endif
    return result;
}

vec3 unmap_color(vec3 color)
{
#ifdef ANTI_SHIMMER
    color = exp(color);
#endif
    return pow(color, vec3(1.0f/pc.gamma));
}

float kdop_intersection(vec3 pos, vec3 dir, vec2 axis_ranges[axis_count])
{
    float near = -1e9f;
    float far = 1e9;
    [[unroll]] for(int a = 0; a < axis_count; ++a)
    {
        vec2 range = axis_ranges[a];
        float inv_dir = 1.0f / dot(dir, axes[a]);
        float proj_pos = dot(pos, axes[a]);
        float t0 = (range.x - proj_pos) * inv_dir;
        float t1 = (range.y - proj_pos) * inv_dir;

        float t_min = min(t0, t1);
        float t_max = max(t0, t1);

        near = max(near, t_min);
        far = min(far, t_max);
    }
    if(near <= far && (near > 0 || far > 0))
        return near > 0 ? near : far;
    else return -1;
}

vec4 bicubic_filter(sampler2DArray tex, vec3 uv)
{
    vec2 texture_size = vec2(textureSize(tex, 0).xy);
    vec4 size_params = vec4(1.0 / vec2(texture_size), vec2(texture_size));
    vec2 pos = size_params.zw * uv.xy;
    vec2 center_pos = floor(pos - 0.5) + 0.5;
    vec2 f = pos - center_pos;
    vec2 f2 = f * f;
    vec2 f3 = f * f2;

    float c = 0.5;
    vec2 w0 =        -c  * f3 +  2.0 * c        * f2 - c * f;
    vec2 w1 =  (2.0 - c) * f3 - (3.0 - c)       * f2         + 1.0;
    vec2 w2 = -(2.0 - c) * f3 + (3.0 - 2.0 * c) * f2 + c * f;
    vec2 w3 =         c  * f3 -               c * f2;

    vec2 w12 = w1 + w2;
    vec2 tc12 = size_params.xy * (center_pos + w2 / w12);
    vec4 center_color = texture(tex, vec3(tc12.x, tc12.y, uv.z));

    vec2 tc0 = size_params.xy * (center_pos - 1.0);
    vec2 tc3 = size_params.xy * (center_pos + 2.0);
    vec4 color = texture(tex, vec3(tc12.x, tc0.y, uv.z)) * (w12.x * w0.y) +
        texture(tex, vec3(tc0.x, tc12.y, uv.z)) * (w0.x * w12.y) +
        center_color * (w12.x * w12.y) +
        texture(tex, vec3(tc3.x, tc12.y, uv.z)) * (w3.x * w12.y) +
        texture(tex, vec3(tc12.x, tc3.y, uv.z)) * (w12.x * w3.y);

    float total_w =  (w12.x * w0.y) + (w0.x * w12.y) + (w12.x * w12.y) + (w3.x * w12.y) + (w12.x * w3.y);

    return color / total_w;
}

void main()
{
    ivec3 p = ivec3(gl_GlobalInvocationID.xyz);
    if(any(greaterThanEqual(p.xy, pc.size)))
        return;

    // Read current color
    vec4 col = texelFetch(src_tex, p, 0);
    vec4 mapped_col = map_color(col.rgb);

    // Read 3x3 neighbor window and look for color ranges
    vec2 axis_ranges[axis_count];
    [[unroll]] for(int a = 0; a < axis_count; ++a)
        axis_ranges[a] = vec2(dot(mapped_col.rgb, axes[a])) + vec2(-kdop_dilation, kdop_dilation);

    float closest_depth = 1;
    ivec2 closest_offset = ivec2(0);

    for(int x = -1; x <= 1; ++x)
    for(int y = -1; y <= 1; ++y)
    {
        vec3 q = vec3(p.x + 0.5f + x, p.y + 0.5f + y, p.z);
        q.xy /= pc.size;

#ifdef EDGE_DILATION
        // Find closest depth in neighborhood
        float d = textureLod(depth_tex, q, 0).r;
        if(d < closest_depth)
        {
            closest_depth = d;
            closest_offset = ivec2(x, y);
        }
#endif

        if(x == 0 && y == 0) continue;

        vec4 c = textureLod(src_tex, q, 0);
        vec4 mc = map_color(c.rgb);

        // Find ranges in k-DOP axes.
        [[unroll]] for(int a = 0; a < axis_count; ++a)
        {
            float r = dot(mc.rgb, axes[a]);
            axis_ranges[a].x = min(r-kdop_dilation, axis_ranges[a].x);
            axis_ranges[a].y = max(r+kdop_dilation, axis_ranges[a].y);
        }
    }

    // Get motion vector and remove jittering.
    vec2 motion = texelFetch(motion_tex, ivec3(p.xy + closest_offset, p.z), 0).xy;
    camera_pair cams = camera.pairs[pc.base_camera_index + p.z];
    if(any(isnan(motion.xy)))
    { // Hit envmap
        vec2 uv = p.xy + 0.5f;
        uv.y = pc.size.y - uv.y;

        vec3 origin, dir;
        get_camera_ray(cams.current, uv, vec2(pc.size), vec2(0), origin, dir);
        motion.xy = get_camera_projected_direction(cams.previous, dir).xy;
    }
    motion.xy += (cams.previous.pan.zw - cams.current.pan.zw) * 0.5f;
    vec2 pixel_size = 1.0f / pc.size;
    vec2 motion_uv = vec2(motion.x, 1.0f-motion.y) - vec2(closest_offset) * pixel_size;

    if(motion_uv.x < 0 || motion_uv.y < 0 || motion_uv.x > 1 + 2.0f * pixel_size.x || motion_uv.y > 1 + 2.0f * pixel_size.y)
    {
        imageStore(dst_img, ivec3(p.xy, p.z + pc.output_layer), col);
        imageStore(history_out_img, p, col);
        return;
    }

    // Reconstruct previous color for this pixel
    vec4 prev_col = max(bicubic_filter(history_tex, vec3(motion_uv, p.z)), vec4(0));
    vec4 mapped_prev_col = map_color(prev_col.rgb);

    // Clip previous color to min/max range
    vec3 delta = mapped_prev_col.rgb - mapped_col.rgb;
    float len = clamp(kdop_intersection(mapped_col.rgb, delta, axis_ranges), 0, 1);
    mapped_prev_col.rgb = mapped_col.rgb + len * delta;

    // Mix history with current frame
    mapped_col.rgb = mix(mapped_prev_col.rgb, mapped_col.rgb, pc.alpha);
    col.rgb = unmap_color(mapped_col.rgb);

    imageStore(dst_img, ivec3(p.xy, p.z + pc.output_layer), col);
    imageStore(history_out_img, p, col);
}
