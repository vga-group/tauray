#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_debug_printf : enable

// Flags:
// USE_NEXT_EVENT_ESTIMATION:
//   NEE makes the samples much better, but doubles the number of rays casted
//   and is quite expensive in that way.
// USE_RUSSIAN_ROULETTE:
//   Enables russian roulette, which kills rays based on a user-defined factor,
//   attenuation and luck.
// USE_BOX_FILTER:
//   Film is sampled with box filter.
// USE_BLACKMAN_HARRIS_FILTER:
//   Film is sampled with Blackman-Harris filter.

#define TLAS_BINDING 0
#define SCENE_DATA_BUFFER_BINDING 1
#define VERTEX_BUFFER_BINDING 2
#define INDEX_BUFFER_BINDING 3
#define TEXTURE_ARRAY_BINDING 4
#define DIRECTIONAL_LIGHT_BUFFER_BINDING 5
#define POINT_LIGHT_BUFFER_BINDING 6
#define ENVIRONMENT_MAP_BINDING 7
#define DISTRIBUTION_DATA_BINDING 8
#define CAMERA_DATA_BINDING 9
#define SCENE_METADATA_BUFFER_BINDING 10
#define SAMPLING_DATA_BINDING 20
#ifdef NEE_SAMPLE_ENVMAP
#define ENVIRONMENT_MAP_ALIAS_TABLE_BINDING 21
#endif
#ifdef NEE_SAMPLE_EMISSIVE_TRIANGLES
#define TRI_LIGHT_BUFFER_BINDING 22
#endif

#ifdef USE_COLOR_TARGET
#define COLOR_TARGET_BINDING 11
#endif

#ifdef USE_DIRECT_TARGET
#define DIRECT_TARGET_BINDING 12
#endif

#ifdef USE_DIFFUSE_TARGET
#define DIFFUSE_TARGET_BINDING 13
#endif

#ifdef USE_ALBEDO_TARGET
#define ALBEDO_TARGET_BINDING 14
#endif

#ifdef USE_MATERIAL_TARGET
#define MATERIAL_TARGET_BINDING 15
#endif

#ifdef USE_NORMAL_TARGET
#define NORMAL_TARGET_BINDING 16
#endif

#ifdef USE_POS_TARGET
#define POS_TARGET_BINDING 17
#endif

#ifdef USE_SCREEN_MOTION_TARGET
#define SCREEN_MOTION_TARGET_BINDING 18
#endif

#ifdef USE_INSTANCE_ID_TARGET
#define INSTANCE_ID_TARGET_BINDING 19
#endif

#define LIGHT_BVH_BUFFER_BINDING 23
#define LIGHT_BIT_TRAIL_BUFFER_BINDING 24

layout(push_constant, scalar) uniform push_constant_buffer
{
    uint samples;
    uint previous_samples;
    float min_ray_dist;
    float indirect_clamping;
    float film_radius;
    float russian_roulette_delta;
    int antialiasing;
    float regularization_gamma;
} control;

#include "path_tracer.glsl"

void main()
{
    pt_vertex_data first_hit_vertex;
    sampled_material first_hit_material;
    vec3 sum_color = vec3(0);
    vec3 sum_direct = vec3(0);
    vec3 sum_diffuse = vec3(0);
#if SAMPLES_PER_PASS != 1
    for(int i = 0; i < SAMPLES_PER_PASS; ++i)
#else
    const int i = 0;
#endif
    {
        local_sampler lsampler = init_local_sampler(
            uvec4(
                get_pixel_pos(),
                gl_LaunchIDEXT.z,
                control.previous_samples + i
            )
        );

        vec3 origin;
        vec3 dir;
        get_world_camera_ray(lsampler, origin, dir);

        vec3 color, direct, diffuse;
        evaluate_ray(
            lsampler, origin, dir,
            color, direct, diffuse, first_hit_vertex, first_hit_material
        );

        sum_color += color;
        sum_direct += direct;
        sum_diffuse += diffuse;
    }

    write_all_outputs(
        sum_color / SAMPLES_PER_PASS,
        sum_direct / SAMPLES_PER_PASS,
        sum_diffuse / SAMPLES_PER_PASS,
        first_hit_vertex,
        first_hit_material
    );
}
