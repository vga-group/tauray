#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_debug_printf : enable

// Flags:
// USE_NEXT_EVENT_ESTIMATION:
//   NEE makes the samples much better, but doubles the number of rays casted
//   and is quite expensive in that way.
// USE_RUSSIAN_ROULETTE:
//   Enables russian roulette, which kills rays based on a user-defined factor,
//   attenuation and luck.
// USE_BOX_FILTER:
//   Film is sampled with box filter.
// USE_BLACKMAN_HARRIS_FILTER:
//   Film is sampled with Blackman-Harris filter.

#define DISTRIBUTION_DATA_BINDING 0
#define SAMPLING_DATA_BINDING 1

#ifdef USE_COLOR_TARGET
#define COLOR_TARGET_BINDING 2
#endif
#ifdef USE_DIRECT_TARGET
#define DIRECT_TARGET_BINDING 3
#endif

#ifdef USE_DIFFUSE_TARGET
#define DIFFUSE_TARGET_BINDING 4
#endif

#ifdef USE_ALBEDO_TARGET
#define ALBEDO_TARGET_BINDING 5
#endif

#ifdef USE_MATERIAL_TARGET
#define MATERIAL_TARGET_BINDING 6
#endif

#ifdef USE_NORMAL_TARGET
#define NORMAL_TARGET_BINDING 7
#endif

#ifdef USE_POS_TARGET
#define POS_TARGET_BINDING 8
#endif

#ifdef USE_SCREEN_MOTION_TARGET
#define SCREEN_MOTION_TARGET_BINDING 9
#endif

#ifdef USE_INSTANCE_ID_TARGET
#define INSTANCE_ID_TARGET_BINDING 10
#endif

#ifdef USE_REFLECTION_TARGET
#define REFLECTION_TARGET_BINDING 11
#endif

#ifdef USE_PROB_TARGET
#define PROB_TARGET_BINDING 30
#endif

layout(push_constant, scalar) uniform push_constant_buffer
{
    uint samples;
    uint previous_samples;
    float min_ray_dist;
    float indirect_clamping;
    float film_radius;
    float russian_roulette_delta;
    int antialiasing;
    float regularization_gamma;
} control;

#include "path_tracer.glsl"

void main()
{
    pt_vertex_data first_hit_vertex;
    sampled_material first_hit_material;
    vec3 sum_color = vec3(0,0,0);
    vec4 sum_diffuse = vec4(0,0,0,0);
    vec4 sum_reflection = vec4(0,0,0,0);

#if defined(BD_BOUNCE_COUNT) || defined(BD_CONTRIBUTION) || defined(BD_MATERIAL_ID) || defined(BD_BSDF_SUM) \
    || defined(BD_PDF_CONTRIBUTION) || defined(BD_FULL_PDF_CONTRIBUTION) || defined(BD_BMFR_MODE)
    material bd_mat_data;
    float bd_bouce_count;
    float bd_weighted_bounce_count;
    float bd_material_id;
    float bd_bsdf_sum;
    float bd_weighted_bsdf;
    float bd_bsdf_weighted_nee;
#endif

#if SAMPLES_PER_PASS != 1
    for(int i = 0; i < SAMPLES_PER_PASS; ++i)
#else
    const int i = 0;
#endif
    {
        local_sampler lsampler = init_local_sampler(
            uvec4(
                get_pixel_pos(),
                gl_LaunchIDEXT.z,
                control.previous_samples + i
            )
        );

        vec3 origin;
        vec3 dir;
        get_world_camera_ray(lsampler, origin, dir);

        vec4 diffuse, reflection;
        evaluate_ray(
            lsampler, origin, dir,
            diffuse, reflection, first_hit_vertex, 
#if defined(BD_BOUNCE_COUNT) || defined(BD_CONTRIBUTION) || defined(BD_MATERIAL_ID) || defined(BD_BSDF_SUM) \
    || defined(BD_PDF_CONTRIBUTION) || defined(BD_FULL_PDF_CONTRIBUTION) || defined(BD_BMFR_MODE)
            bd_mat_data, bd_bouce_count, bd_weighted_bounce_count, bd_material_id,
            bd_bsdf_sum, bd_weighted_bsdf, bd_bsdf_weighted_nee,
#endif
            first_hit_material
        );
#ifdef USE_WHITE_ALBEDO_ON_FIRST_BOUNCE
        vec3 old_color = first_hit_material.albedo.rgb;
        first_hit_material.albedo.rgb = vec3(1);
#endif
        sum_color += first_hit_material.emission + modulate_color(first_hit_material, diffuse.rgb, reflection.rgb);
        sum_diffuse += diffuse;
        sum_reflection += reflection;
#ifdef USE_WHITE_ALBEDO_ON_FIRST_BOUNCE
        first_hit_material.albedo.rgb = old_color;
#endif
    }

#if defined(BD_BOUNCE_COUNT)
    write_noise_data(
        vec3(bd_bouce_count) / MAX_BOUNCES / SAMPLES_PER_PASS
    );
#elif defined(BD_CONTRIBUTION)
    write_noise_data(
        vec3(bd_weighted_bounce_count) / MAX_BOUNCES / SAMPLES_PER_PASS
    );
#elif defined(BD_MATERIAL_ID)
    write_noise_data(
        vec3(bd_mat_data.albedo_tex_id)
    );
#elif defined(BD_BSDF_SUM)
    write_noise_data(
        vec3(bd_bsdf_sum) / bd_bouce_count
    );
#elif defined(BD_PDF_CONTRIBUTION)
    write_noise_data(
        vec3(bd_weighted_bsdf)
    );
#elif defined(BD_FULL_PDF_CONTRIBUTION)
    write_noise_data(
        vec3(bd_bsdf_weighted_nee)
    );

#elif defined(BD_BMFR_MODE)
    write_all_outputs(
        sum_color.rgb / SAMPLES_PER_PASS,
        sum_diffuse.rgba / SAMPLES_PER_PASS,
        sum_reflection.rgba / SAMPLES_PER_PASS,
        first_hit_vertex,
        vec3(bd_bsdf_sum),
        first_hit_material
    );

#else
    write_all_outputs(
        sum_color.rgb / SAMPLES_PER_PASS,
        sum_diffuse.rgba / SAMPLES_PER_PASS,
        sum_reflection.rgba / SAMPLES_PER_PASS,
        first_hit_vertex,
        first_hit_material
    );
#endif
}
